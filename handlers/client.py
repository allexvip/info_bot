from aiogram import types, Dispatcher
from create_bot import *
from db.sqlite_db import *
from aiogram.utils.callback_data import CallbackData
from keyboards import kb_client
from aiogram.types import ReplyKeyboardRemove
from db import sqlite_db

'''******************** Client part ********************************'''


# again
async def send_projects_list(message: types.Message):
    await send_sql(
        "INSERT INTO logs (`chat_id`,`username`,`message`,`upd`) VALUES ('{0}','{1}','{2}',datetime('now'))".format(
            message.chat.id, message.chat.username, message.text))
    await send_sql(
        "INSERT INTO users (`chat_id`,`username`,`first_name`,`last_name`,`upd`) SELECT '{0}','{1}','{2}','{3}',datetime('now') where (select count(*) from `users` where chat_id='{0}')=0".format(
            message.chat.id,
            message.chat.username,
            message.chat.first_name,
            message.chat.last_name,
        ))

    await message.answer("""–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞–ø–∏—Å–∞—Ç—å:

 - üî• –ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –≤ –ì–î –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞ –æ –≤–≤–µ–¥–µ–Ω–∏–∏ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –∞–ª–∏–º–µ–Ω—Ç–æ–≤ –∂–º–∏—Ç–µ /alimentover

üí° –∫–∞–∫ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç /help
 """)


@dp.message_handler(commands=['set_city'])
async def set_city(message: types.Message):
    await send_sql(
        "INSERT INTO logs (`chat_id`,`username`,`message`,`upd`) VALUES ('{0}','{1}','{2}',datetime('now'))".format(
            message.chat.id, message.chat.username, message.text))
    # ----keyboard
    vote_region_cb = CallbackData('vote', 'action', 'amount')  # post:<action>:<amount>
    region_data = await get_data("SELECT id,name FROM region WHERE country_id=0 ORDER BY name")
    region_dict = dict(region_data)

    def get_keyboard(dict, action):
        urlkb = types.InlineKeyboardMarkup(row_width=3)
        inline_buttons_list = []
        for key in dict.keys():
            inline_buttons_list.append(types.InlineKeyboardButton(dict[key],
                                                                  callback_data=vote_region_cb.new(action=action,
                                                                                                   amount=key), ), )
        urlkb.add(*inline_buttons_list)
        return urlkb

    await message.answer('–î–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–æ—Ö–æ–¥–æ–≤ –∫ –Ω–∞—Ä–æ–¥–Ω—ã–º –∏–∑–±—Ä–∞–Ω–Ω–∏–∫–∞–º –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö –Ω–∞–º –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –í—ã –≤—ã–±—Ä–∞–ª–∏ –í–∞—à —Ä–µ–≥–∏–æ–Ω:', reply_markup=get_keyboard(region_dict, 'region'))

    @dp.callback_query_handler(vote_region_cb.filter(action='region'))
    async def vote_up_cb_handler(query: types.CallbackQuery, callback_data: dict):
        amount = int(callback_data['amount'])
        global city_dict
        city_data = await get_data("SELECT rowid,name FROM city WHERE region_id={} ORDER BY name".format(amount))
        city_dict = dict(city_data)
        await send_sql(
            "UPDATE users set region_id = '{0}' where chat_id='{1}'".format(
                amount,
                query.message.from_user.id
            ))
        await bot.edit_message_text('–í—ã –≤—ã–±—Ä–∞–ª–∏: {0}'.format(region_dict[amount]),
                                    query.from_user.id,
                                    query.message.message_id,
                                    reply_markup=None)
        await query.message.answer('–°–ø–∞—Å–∏–±–æ! üëç –ü–æ–∫–∞ –≤—ã–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏–æ–Ω, –≤ –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º –≥–æ—Ä–æ–¥–∞.\n\n–ß—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –í–∞—à —Ä–µ–≥–∏–æ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_city')
        await send_projects_list(query.message)
        # await bot.edit_message_text('{}'.format(region_dict[amount]), query.from_user.id,
        #                             query.message.message_id,
        #                             reply_markup=get_keyboard(city_dict, 'city'))

    @dp.callback_query_handler(vote_region_cb.filter(action='city'))
    async def vote_up_cb_handler(query: types.CallbackQuery, callback_data: dict):
        amount = int(callback_data['amount'])
        await send_sql(
            "UPDATE users set city_id = '{0}' where chat_id={1}".format(
                amount,
                query.message.from_user.id
            ))
        await bot.edit_message_text('–í—ã –≤—ã–±—Ä–∞–ª–∏: {0}, {1}'.format(query.message.text, city_dict[amount]),
                                    query.from_user.id,
                                    query.message.message_id,
                                    reply_markup=None)
        await query.message.answer('–°–ø–∞—Å–∏–±–æ! üëç\n\n–ß—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –í–∞—à —Ä–µ–≥–∏–æ–Ω –∏ –≥–æ—Ä–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_city')
        await send_projects_list(query.message)


@dp.message_handler(commands=['my_appeals'])
async def send_my_appeals(message: types.Message):
    await message.answer(str(message.chat.id) + '\n\n' + message.text)
    list = await get_users_votes('alijail')
    for item in list:
        if item[0] == message.chat.id:
            await message.answer('–í—ã –ø–∏—Å–∞–ª–∏:\n\n{}'.format(item[2]))


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    # await message.answer(message.chat.id)
    # user_channel_status = await bot.get_chat_member(chat_id=-1001176029164, user_id=message.chat.id)
    # if user_channel_status["status"] != 'left':
    #     await message.answer('text if in group')
    # else:
    #     await message.answer('text if not in group')
    await send_sql(
        "INSERT INTO logs (`chat_id`,`username`,`message`,`upd`) VALUES ('{0}','{1}','{2}',datetime('now'))".format(
            message.chat.id, message.chat.username, message.text))
    await send_sql(
        "INSERT INTO users (`chat_id`,`username`,`first_name`,`last_name`,`upd`) SELECT '{0}','{1}','{2}','{3}',datetime('now') where (select count(*) from `users` where chat_id='{0}')=0".format(
            message.chat.id,
            message.chat.username,
            message.chat.first_name,
            message.chat.last_name,
        ))

    await message.answer("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ì–æ—Å–¥—É–º—É –∏ –°–æ–≤–µ—Ç—É –§–µ–¥–µ—Ä–∞—Ü–∏–∏.

–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã:
- üî• –ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –≤ –ì–î –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞ –æ –≤–≤–µ–¥–µ–Ω–∏–∏ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –∞–ª–∏–º–µ–Ω—Ç–æ–≤ –∂–º–∏—Ç–µ /alimentover

üí° –∫–∞–∫ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç /help
""")
    res = await get_data("select region_id from users where chat_id = {} limit 1".format(message.from_user.id))
    if res[0][0] == None:
        await set_city(message)


""" - ‚ÄºÔ∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç—ã –æ –≤–≤–µ–¥–µ–Ω–∏–∏ —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –∑–∞ —á–∞—Å—Ç–∏—á–Ω—É—é –Ω–µ—É–ø–ª–∞—Ç—É –∞–ª–∏–º–µ–Ω—Ç–æ–≤ –∂–º–∏—Ç–µ /alijail """


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.answer("""–ö–∞–∫ –ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –∂–∞–ª–æ–±—ã –≤ –ì–æ—Å–î—É–º—É —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –æ—Ç –°–µ–º–µ–π–Ω–æ–≥–æ –§—Ä–æ–Ω—Ç–∞. –í–ò–î–ï–û–ò–ù–°–¢–†–£–ö–¶–ò–Ø
https://www.youtube.com/watch?v=dWvOrnXiLkg

–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞:
https://youtu.be/hVAcztBylIc

–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–º–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: https://cloud.mail.ru/public/MuK2/CJSZQJc9w

–ï—â—ë –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è) –ø–æ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞:
https://vinadm.blogspot.com/2017/04/chrome-letterskremlinru.html

–ñ–º–∏—Ç–µ /start""")


@dp.message_handler(commands=['get_unconfirmed_votes', 'get_uv'])
async def send_unconfirmed_votes(message: types.Message):
    repo = repository.RepositorySQLite()
    repo.connection = con
    repo.cursor = cur
    votes = repo.get_unconfirmed_votes_by_chat(message.chat.id)
    text = ''
    for v in votes:
        formated_str = '{deputy} ({project_name}) - /{confirm_link}'.format(
            deputy=v.deputy.full_name,
            project_name=v.project.short_name,
            confirm_link=v.get_confirm_link()
        )
        print(formated_str)
        text += '{0}\n'.format(formated_str)

    await message.answer(text)


@dp.message_handler(regexp='(^[\/]+[a-z].*)')
async def send_project_info(message: types.Message):
    await send_sql(
        "INSERT INTO logs (`chat_id`,`username`,`message`,`upd`) VALUES ('{0}','{1}','{2}',datetime('now'))".format(
            message.chat.id, message.chat.username, message.text))

    # write projects content
    flag_done = False
    project = message.text.replace('/', '')
    sql = """SELECT d.rowid,`dep`,`link_send`,d.person_type FROM deps d
LEFT JOIN votes v ON v.dep_id=d.rowid and v.project_code='{0}'
WHERE v.dep_id IS null
ORDER BY RANDOM()
LIMIT 1""".format(project)
    a = await send_sql(sql)
    if not a:
        """ if all deps already used for first round then we use individual dep for user"""
        sql = """SELECT d.rowid,`dep`,`link_send`,d.person_type FROM deps d
    LEFT JOIN votes v ON v.dep_id=d.rowid and v.project_code='{0}' and v.chat_id='{1}'
    WHERE v.dep_id IS null and person_type='sf'
    ORDER BY RANDOM()
    LIMIT 1""".format(project, message.chat.id)
        a = await send_sql(sql)
        if not a:
            flag_done = True
    project_obj = await send_sql(
        "select `desc` from projects where project_code in ('{0}') limit 1".format(project))
    # project_desc = project_obj[0]

    if not flag_done:
        dep_id = str(a[0])
        dep_name = str(a[1])
        link_send = str(a[2])
        person_type = str(a[3])
        if 'sf' in person_type:
            person_type_str = "–°–æ–≤–µ—Ç –§–µ–¥–µ—Ä–∞—Ü–∏–∏"
        else:
            person_type_str = "–ì–æ—Å–î—É–º–∞"

        # ----keyboard
        vote_cb = CallbackData('vote', 'action', 'amount')  # post:<action>:<amount>

        def get_keyboard(amount):
            return types.InlineKeyboardMarkup().row(
                types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üëç', callback_data=vote_cb.new(action='voted',
                                                                                      amount='/' + dep_id + '_' + project),
                                           ),
            )

        @dp.callback_query_handler(vote_cb.filter(action='voted'))
        async def vote_up_cb_handler(query: types.CallbackQuery, callback_data: dict):
            # logging.info(callback_data)
            # for write in db votes
            await send_sql(
                "INSERT INTO logs (`chat_id`,`username`,`message`,`upd`) VALUES ('{0}','{1}','{2}',datetime('now'))".format(
                    query.message.chat.id, query.message.chat.username, callback_data['amount']))
            project_code = callback_data['amount'].split('_')[1]
            dep_id = callback_data['amount'].split('_')[0].replace('/', '')
            await send_sql(
                "INSERT INTO votes (`chat_id`,`user_answer`,`project_code`,`dep_id`,`upd`) VALUES ('{0}','{1}','{2}','{3}',datetime('now'))".format(
                    query.message.chat.id,
                    callback_data['amount'],
                    project_code,
                    dep_id))
            await bot.edit_message_text(query.message.text, query.from_user.id, query.message.message_id,
                                        reply_markup=None)
            await query.message.answer(f"""‚úÖ –ü–æ–º–µ—Ç–∏–ª —É —Å–µ–±—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —É—á–∞—Å—Ç–∏–µ! üôÇ –í–º–µ—Å—Ç–µ –º—ã —Å–∏–ª–∞! üí™üí™üí™ """)
            await send_projects_list(query.message)

        @dp.callback_query_handler(vote_cb.filter(action='up'))
        async def vote_up_cb_handler(query: types.CallbackQuery, callback_data: dict):
            logging.info(callback_data)
            amount = int(callback_data['amount'])
            amount += 1
            await bot.edit_message_text(f'You voted up! Now you have {amount} votes.',
                                        query.from_user.id,
                                        query.message.message_id,
                                        reply_markup=get_keyboard(amount))

        @dp.callback_query_handler(vote_cb.filter(action='down'))
        async def vote_down_cb_handler(query: types.CallbackQuery, callback_data: dict):
            amount = int(callback_data['amount'])
            amount -= 1
            await bot.edit_message_text(f'You voted down! Now you have {amount} votes.',
                                        query.from_user.id,
                                        query.message.message_id,
                                        reply_markup=get_keyboard(amount))

        # ----keyboard end

        text_appeal = """–†–∞–∑–æ–≤–æ —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞: https://vk.cc/c7LhIc

–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–¥–µ—Å—å: https://semfront.ru/prog/texter.php?case=alimentover&user={0}&face={1}

–í—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–∏–ø '–ó–∞—è–≤–ª–µ–Ω–∏–µ' –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é.  """.format(
            message.from_user.id, dep_name.replace(' ', '%20'))
        await message.answer(
            f"{dep_name} ({person_type_str})\n\n{text_appeal} \n\n–ü–∏—à–µ–º —Å—é–¥–∞: {link_send}\n\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üëç' \n\nüí° –∫–∞–∫ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç /help"
            , reply_markup=get_keyboard(0))
    else:
        await message.answer("""‚úÖ –°–ø–∞—Å–∏–±–æ –í–∞–º –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤—Å–µ–º –ø–∞—Ä–ª–∞–º–µ–Ω—Ç–∞—Ä–∏—è–º! üí™üí™üí™ 
    –°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ /start
                         """)


@dp.message_handler(regexp='^[\/]+[\w].*[_]+[A-Za-z].*')
async def write_command(message: types.Message):
    # for write in db votes
    await send_sql(
        "INSERT INTO logs (`chat_id`,`username`,`message`,`upd`) VALUES ('{0}','{1}','{2}',datetime('now'))".format(
            message.chat.id, message.chat.username, message.text))
    project_code = message.text.split('_')[1]
    dep_id = message.text.split('_')[0].replace('/', '')
    await send_sql(
        "INSERT INTO votes (`chat_id`,`user_answer`,`project_code`,`dep_id`,`upd`) VALUES ('{0}','{1}','{2}','{3}',datetime('now'))".format(
            message.chat.id,
            message.text,
            project_code,
            dep_id))
    await message.answer("""‚úÖ –ü–æ–º–µ—Ç–∏–ª —É —Å–µ–±—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —É—á–∞—Å—Ç–∏–µ! üôÇ –í–º–µ—Å—Ç–µ –º—ã —Å–∏–ª–∞! üí™üí™üí™

–ß—Ç–æ–±—ã –µ—â—ë –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–º—É –ø–∞—Ä–ª–∞–º–µ–Ω—Ç–∞—Ä–∏—é –Ω–∞–∂–º–∏—Ç–µ: /{0} .

–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ /start""".format(project_code))


def register_handlers_client(dp: Dispatcher):
    dp.message_handler(set_city)
    dp.message_handler(send_my_appeals)
    dp.message_handler(send_welcome)
    dp.message_handler(send_help)
    dp.message_handler(send_unconfirmed_votes)
    dp.message_handler(send_project_info)
    dp.message_handler(write_command)
